package ppa

object area_par {
  //Map[datawidh,Map[muxn,area]]
  val area_mux_width_map:Map[Int,Map[Int , Double]] = Map(  
    1 -> Map(
      1 -> 2.88,
      2 -> 4.32,
      3 -> 9.12,
      4 -> 10.04,
      5 -> 16.8,
      6 -> 19.68,
      7 -> 24,
      8 -> 30.24,
      9 -> 32.64,
      10 -> 35.52,
      11 -> 38.88,
      12 -> 39.36,
      13 -> 46.56,
      14 -> 47.52,
      15 -> 49.44,
      16 -> 88.42,   //91.2????
      17 -> 60.96,
      18 -> 60.96,
      19 -> 70.08,
      20 -> 68.16,
      21 -> 80.16,
      22 -> 78.24,
      23 -> 74.4,
      24 -> 77.28,
      25 -> 81.12,
      26 -> 95.04,
      27 -> 89.28,
      28 -> 93.6,
      29 -> 103.68,
      30 -> 110.88


    ),

//    8 -> Map( 
//      1 -> 0,
//      2 -> 0,
//      3 -> 0,
//      4 -> 0,
//      5 -> 0,
//      6 -> 0,
//      7 -> 0,
//      8 -> 0,
//      9 -> 0,
//      10 -> 0,
//      11 -> 0,
//      12 -> 0,
//      13 -> 0,
//      14 -> 0,
//      15 -> 0,
//      16 -> 0,
//      17 -> 0,
//      18 -> 0,
//      19 -> 0,
//      20 -> 0,
//      21 -> 0,
//      22 -> 0,
//      23 -> 0,
//      24 -> 0,
//      25 -> 0
//    ),


    16 -> Map(
      1 -> 46.08,
      2 -> 69.12,
      3 -> 90.72,
      4 -> 147.36,
      5 -> 192,
      6 -> 218.4,
      7 -> 259.2,
      8 -> 285.6,
      9 -> 337.44,
      10 -> 387.84,
      11 -> 412.33,
      12 -> 464.16,
      13 -> 498.72,
      14 -> 528,
      15 -> 560.64,
      16 -> 609.6,
      17 -> 647.52,
      18 -> 685.92,
      19 -> 721.92,
      20 -> 772.32,
      21 -> 813.12,
      22 -> 838.08,
      23 -> 884.16,
      24 -> 918.72,
      25 -> 959.04,
      26 -> 984.96,
      27 -> 1023.36,
      28 -> 1056.96,
      29 -> 1095.36,
      30 -> 1120.32
    )

//    32 -> Map(   
//      1 -> 0,
//      2 -> 0,
//      3 -> 0,
//      4 -> 0,
//      5 -> 0,
//      6 -> 0,
//      7 -> 0,
//      8 -> 0,
//      9 -> 0,
//      10 -> 0,
//      11 -> 0,
//      12 -> 0,
//      13 -> 0,
//      14 -> 0,
//      15 -> 0,
//      16 -> 0,
//      17 -> 0,
//      18 -> 0,
//      19 -> 0,
//      20 -> 0,
//      21 -> 0,
//      22 -> 0,
//      23 -> 0,
//      24 -> 0,
//      25 -> 0
//    )
  )


  //Map[datawidth,[pe_input,area]] num: number of operations
  val area_delay_width_map:Map[Int,Map[Int , Double]] = Map(  
    1 -> Map(
      1 -> 13.44,
      2 -> 25.44,
      3 -> 37.44,
      4 -> 13*4,
      5 -> 13*5,
      6 -> 13*6,
      7 -> 13*7,
      8 -> 13*8
    ),

//    8 -> Map(
//      2 -> 0,
//      3 -> 0,
//    ),

    16 -> Map(
      2 -> 385.44,
      3 -> 577.44
    )
    //    32 -> Map(
    //      2 -> 0,
    //      3 -> 0,
    //    ),

  )
  //  val area_mux32_map :Map[Int,Int] = Map(
  //    1 ->0,
  //    2 ->115,
  //    3->143,
  //    4->215,
  //    5->277,
  //    6->316,
  //    7->386,
  //    8->421,
  //    9->509,
  //    10->572,
  //    11->607,
  //    12->690,
  //    13->740,
  //    14->776,
  //    15->834
  //
  //  )


  //  val area_delay32_map : Map[Int, Int] = Map(
  //    1 ->867,
  //    2-> 1322,
  //    3->1700,
  //    4 -> 2157,
  //    5 ->  2555,
  //    6 ->2926,
  //    7 ->  3315
  //
  //  )
  //Map[num,[maxDelay,area]] num: number of operations
//  val area_delay32_map : Map[Int, Map[Int,Int]] = Map(
//    1 -> Map(
//      1 -> 916,
//      2-> 1426,
//      3-> 1830,
//      4 -> 2314,
//      5 ->  2771,
//      6 -> 3157,
//      7 ->  3654
//    ),
//    2 -> Map(
//      1 -> 1891,
//      2 -> 2388,
//      3 -> 3056,
//      4 -> 3665,
//      5 -> 4105,
//      6 -> 4649,
//      7 -> 5171
//    )
//    //    1 ->878,
//    //    2-> 1332,
//    //    3->1736,
//    //    4 -> 2192,
//    //    5 ->  2592,
//    //    6 ->2979,
//    //    7 ->  3396
//
//  )
//
//

  //  val area_alu32_map : Map[String, Int] = Map(
  //      "PASS" -> 60,
  //      "ADD" -> 402,
  //      "SUB" -> 340,
  //      "MUL" -> 3895,
  //      "AND" -> 83,
  //      "OR" ->83 ,
  //      "XOR" ->118 ,
  //      "SHL" -> 445,
  //      "LSHR" -> 453,
  //      "ASHR" -> 459 ,
  //      "EQ" -> 137,
  //      "NE" -> 137,
  //      "LT" -> 189,
  //      "LE" -> 187,
  //      "SEL" -> 109
  //    )

  val op_group:  Map [Int,Map[List[String] ,String]] = Map(
    2->Map(
//      ( List("Add","Sub" )->"group0"),
//      ( List("Adc","Sbc") -> "group1"),
//      ( List("GTE_Max","LTE_Min" )->"group2"),
//      ( List("Mult1","Mult2" )->"group3-1"),
//      ( List("Mult0" )->"group3-2"),
//      ( List("SHL","SHR")->"group4"),
//      ( List("And","Or","XOr","Sel" )->"group5"),
    ),
    3->Map(

      ( List("Add","Sub") -> "group1-0"),
      ( List("Adc","Sbc") -> "group6"),
//      ( List("GTE_Max","LTE_Min" )->"group7"),
//      ( List("Mult1","Mult2" )->"group8-1"),
//      ( List("Mult0")->"group8-2"),
//      ( List("SHL","SHR")->"group9"),
//      ( List("And","Or","XOr","Sel" )->"group10"),
      ( List("TAA","TAS","TSA","TSS")->"group11"),
//      ( List("MULADD","MULSUB" )->"group12"),
    )  

  )

// datawidth -> (op -> area)
  val area_alu_width_map : Map[Int,Map[String, Double]] = Map(
    2 -> Map(   //logic +50 

      "Add" -> 180,
      "Sub" -> 256.32,
      "Adc" -> 315.84,
      "Sbc" -> 414.24,
      "Abs" -> 136.32,
      "GTE_Max" -> 254.48,  //+50
      "LTE_Min" -> 249.68, //+50
      "Sel" -> 143.12, //+50
      "Mult0" -> 1359.36,
      "Mult1" -> 2142.72,
      "Mult2" -> 2495.04,
      "SHR" -> 384.56, //+50
      "SHL" -> 299.12, //+50
      "Or" -> 92.4,  //+30
      "And" -> 92.4, //+30
      "XOr" -> 123.12, //+30

      "group0" -> 256.32,
      "group1" -> 414.24,
      "group2" -> 199.68,
      "group3-1" -> 2398.56,    //   *
      "group3-2" -> 1339.7,
      "group4" -> 314.4,
      "group5" -> 93.12,

//      "Add" -> 180,
//      "Sub" -> 256.32,
//      "Adc" -> 315.84,
//      "Sbc" -> 414.24,
//      "Abs" -> 136.32,
//      "GTE_Max" -> 204.48,
//      "LTE_Min" -> 199.68,
//      "Sel" -> 93.12,
//      "Mult0" -> 1359.36,
//      "Mult1" -> 2142.72,
//      "Mult2" -> 2495.04,
//      "SHR" -> 334.56,
//      "SHL" -> 249.12,
//      "Or" -> 62.4,
//      "And" -> 62.4,
//      "XOr" -> 93.12,
//
//      "group0" -> 256.32,
//      "group1" -> 414.24,
//      "group2" -> 199.68,
//      "group3-1" -> 2398.56,    //   *
//      "group3-2" -> 1339.7,
//      "group4" -> 314.4,
//      "group5" -> 93.12,
    ),
    3 -> Map(   //logic+50 
      "Add" -> 180,
      "Sub" -> 256.32,
      "Adc" -> 315.84,
      "Sbc" -> 414.24,
      "Abs" -> 186.32,   //1
      "GTE_Max" -> 249.68, //1
      "LTE_Min" -> 245.84, //1
      "Sel" -> 143.12,  //1
      "Mult0" -> 1239.7,  //-100
      "Mult1" -> 1950.56,  //-100
      "Mult2" -> 2298.56, //-100
      "SHR" -> 364.4,  //1
      "SHL" -> 295.28,  //1
      "Or" -> 112.4,  //1
      "And" -> 112.4,  //1
      "XOr" -> 143.12,  //1
      "MULADD" -> 1398.08,  //-100
      "MULSUB" -> 1383.68,  //-100
      "TAA" -> 302.88,
      "TAS" -> 386.88,
      "TSA" -> 386.88,
      "TSS" -> 343.2,
      "CROP" -> 557.36, //1
      "MULSHR" -> 1581.12,

      "group1-0" -> 256.32,
      "group6" -> 414.24,    // +
      "group7" -> 199.68,
      "group8-1" -> 2398.56,    //   *
      "group8-2" -> 1339.7,
      "group9" -> 314.4,
      "group10" -> 93.12,
      "group11" -> 386.88,   //  + +
      "group12" -> 1498.08,    //  * +
      "group13" -> 5646.24,   // add + mul + muladd + taa ……

//      "Add" -> 180,
//      "Sub" -> 256.32,
//      "Adc" -> 315.84,
//      "Sbc" -> 414.24,
//      "Abs" -> 136.32,
//      "GTE_Max" -> 199.68,
//      "LTE_Min" -> 195.84,
//      "Sel" -> 93.12,
//      "Mult0" -> 1339.7,
//      "Mult1" -> 2050.56,
//      "Mult2" -> 2398.56,
//      "SHR" -> 314.4,
//      "SHL" -> 245.28,
//      "Or" -> 62.4,
//      "And" -> 62.4,
//      "XOr" -> 93.12,
//      "MULADD" -> 1498.08,
//      "MULSUB" -> 1483.68,
//      "TAA" -> 302.88,
//      "TAS" -> 386.88,
//      "TSA" -> 386.88,
//      "TSS" -> 343.2,
//      "CROP" -> 507.36,
//      "MULSHR" -> 1581.12,
//
//      "group1-0" -> 256.32,
//      "group6" -> 414.24,    // +
//      "group7" -> 199.68,
//      "group8-1" -> 2398.56,    //   *
//      "group8-2" -> 1339.7,
//      "group9" -> 314.4,
//      "group10" -> 93.12,
//      "group11" -> 386.88,   //  + +
//      "group12" -> 1498.08,    //  * +
//      "group13" -> 5646.24   // add + mul + muladd + taa ……

    )
  )
  //mux in -> area
  val area_cond_map : Map[Int,Double]= Map(
//    1 -> 0,
//    2 -> 0,
//    3 -> 0,
//    4 -> 0,
//    5 -> 0,
//    6 -> 0,
//    7 -> 0,
//    8 -> 0,
//    9 -> 0,
//    10 -> 0,
//    11 -> 0,
//    12 -> 0,
//    13 -> 0,
//    14 -> 0,
//    15 -> 0,
    16 -> 91.2 
  )
  // width -> area
  val area_mode_map : Map[Int,Double]=Map(
    1 -> 30.24,
    16 -> 314.88
  )

  val area_lut_map : Map[Int,Double]= Map(
    1 -> 4.32,
    2 -> 11.04,
    3 -> 24.96, 
    4 -> 57.12,
    5 -> 104.64,
    6 -> 214.56,
    7 -> 405.12,
    8 -> 514.08,
  )



  val area_regnxt_width :Map [Int,Double] = Map(
    1 -> 15.28,
  //  8 -> 0,
    16 -> 193.44
//    32 -> 0
  )
  //val area_cfgpre32 = 11
  //val area_cfgpre32 = 13.44
  val area_cfgpre32 = 15.28

  val cycle = 5
  val reduce_rate = 0

}

